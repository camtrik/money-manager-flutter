// UI in this file is almost fully generated by Claude 3.7 Sonnet
import 'package:flutter/material.dart';
import 'package:money_manager/screens/select_category_sheet.dart';
import 'package:money_manager/utils/category_utils.dart';
import 'package:money_manager/utils/date_formatter.dart';
import 'package:provider/provider.dart';
import 'package:money_manager/models/category.dart';
import 'package:money_manager/models/transaction.dart';
import 'package:money_manager/view_models/tx_list_model.dart';
import 'package:money_manager/l10n/gen/app_localizations.dart';

class AddTransactionSheet extends StatefulWidget {
  final Category category;

  const AddTransactionSheet({super.key, required this.category});

  @override
  State<AddTransactionSheet> createState() => _AddTransactionSheetState();
}

class _AddTransactionSheetState extends State<AddTransactionSheet> {
  String _amount = '0';
  String _currency = 'CNY';
  DateTime _date = DateTime.now();
  final TextEditingController _notesController = TextEditingController();
  late Category _selectedCategory;
  
  @override
  void initState() {
    super.initState();
    _selectedCategory = widget.category;
  }

  void _onNumberPressed(String value) {
    setState(() {
      if (_amount == '0') {
        _amount = value;
      } else {
        _amount += value;
      }
    });
  }

  void _onDecimalPressed() {
    setState(() {
      if (!_amount.contains('.')) {
        _amount += '.';
      }
    });
  }

  void _onClearPressed() {
    setState(() {
      _amount = '0';
    });
  }

  void _onDeletePressed() {
    setState(() {
      if (_amount.length > 1) {
        _amount = _amount.substring(0, _amount.length - 1);
      } else {
        _amount = '0';
      }
    });
  }

  void _saveTransaction() {
    final amount = double.tryParse(_amount) ?? 0.0;
    if (amount > 0) {
      final transaction = Transaction(
        amount: amount,
        currency: _currency,
        category: _selectedCategory,
        notes: _notesController.text.trim(), 
        occurredAt: _date,
      );
      context.read<TxListModel>().add(transaction);
      Navigator.pop(context);
    }
  }

  void _showDatePicker() async {
    final pickedDate = await showDatePicker(
      context: context,
      initialDate: _date,
      firstDate: DateTime(2010),
      lastDate: DateTime.now(),
    );
    if (pickedDate != null) {
      setState(() {
        _date = pickedDate;
      });
    }
  }

  void _showCategoryPicker() {
    showModalBottomSheet(
      context: context, 
      isScrollControlled: true, 
      backgroundColor: Colors.transparent, 
      builder: (context) => SelectCategorySheet(
        onCategorySelected: (selectedCategory) {
          setState(() {
            _selectedCategory = selectedCategory;
          });
        }
      )
    );
  }

  @override
  void dispose() {
    _notesController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    
    return Container(
      height: MediaQuery.of(context).size.height * 0.7,
      decoration: const BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.only(
          topLeft: Radius.circular(16),
          topRight: Radius.circular(16),
        ),
      ),
      child: Column(
        children: [
          // Handle bar
          Container(
            width: 40,
            height: 4,
            margin: const EdgeInsets.symmetric(vertical: 12),
            decoration: BoxDecoration(
              color: Colors.grey.shade300,
              borderRadius: BorderRadius.circular(2),
            ),
          ),

          // Header with category type and from account
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16), 
            child: Center(
              child: GestureDetector(
                onTap: _showCategoryPicker,
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                  decoration: BoxDecoration(
                    color: Color(_selectedCategory.colorValue).withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(24),
                    border: Border.all(
                      color: Color(_selectedCategory.colorValue).withValues(alpha: 0.3),
                      width: 1,
                    ),
                  ),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      CircleAvatar(
                        radius: 20,
                        backgroundColor: Color(_selectedCategory.colorValue).withValues(alpha: 0.2),
                        child: Icon(
                          _selectedCategory.icon,
                          size: 20,
                        ),
                      ),
                      const SizedBox(width: 12),
                      Text(
                        CategoryUtils.getLocalizedName(context, _selectedCategory.id, _selectedCategory.name),
                        style: const TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                      ),
                      const SizedBox(width: 8),
                      Icon(
                        Icons.arrow_drop_down,
                        color: Color(_selectedCategory.colorValue),
                      ),
                    ],
                  ),
                ),
                // onTap: _showCategoryPicker,
              ),
            ),
          ), 
        
          const SizedBox(height: 16),

          // Amount display
          Text(
            l10n.expense,
            style: TextStyle(color: Colors.grey.shade600, fontSize: 16),
          ),
          const SizedBox(height: 8),
          Text(
            '¥ $_amount',
            style: const TextStyle(
              fontSize: 36,
              fontWeight: FontWeight.bold,
              color: Colors.black87,
            ),
          ),

          const SizedBox(height: 16),

          // Note field
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: TextField(
              controller: _notesController,
              decoration: InputDecoration(
                hintText: l10n.notes,
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                  borderSide: BorderSide(color: Colors.grey.shade300),
                ),
                contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
              ),
            ),
          ),

          const SizedBox(height: 16),

          // Calculator buttons with constrained width
          Expanded(
            child: Center(
              child: ConstrainedBox(
                constraints: const BoxConstraints(maxWidth: 400),
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  child: Column(
                    children: [
                      // First row
                      _buildButtonRow([
                        _buildOperatorButton('÷'),
                        _buildCalculatorButton('7', onPressed: () => _onNumberPressed('7')),
                        _buildCalculatorButton('8', onPressed: () => _onNumberPressed('8')),
                        _buildCalculatorButton('9', onPressed: () => _onNumberPressed('9')),
                        _buildIconButton(Icons.backspace_outlined, onPressed: _onDeletePressed),
                      ]),
                      const SizedBox(height: 8),
                      
                      // Second row
                      _buildButtonRow([
                        _buildOperatorButton('×'),
                        _buildCalculatorButton('4', onPressed: () => _onNumberPressed('4')),
                        _buildCalculatorButton('5', onPressed: () => _onNumberPressed('5')),
                        _buildCalculatorButton('6', onPressed: () => _onNumberPressed('6')),
                        _buildCalculatorButton('AC', onPressed: _onClearPressed),
                        
                      ]),
                      const SizedBox(height: 8),
                      
                      // Third row
                      _buildButtonRow([
                        _buildOperatorButton('-'),
                        _buildCalculatorButton('1', onPressed: () => _onNumberPressed('1')),
                        _buildCalculatorButton('2', onPressed: () => _onNumberPressed('2')),
                        _buildCalculatorButton('3', onPressed: () => _onNumberPressed('3')),
                        _buildIconButton(Icons.calendar_today, onPressed: _showDatePicker),
                      ]),
                      const SizedBox(height: 8),
                      
                      // Fourth row
                      _buildButtonRow([
                        _buildOperatorButton('+'),
                        _buildCalculatorButton('0', onPressed: () => _onNumberPressed('0')),
                        _buildCalculatorButton('.', onPressed: _onDecimalPressed),
                        _buildCalculatorButton('¥', onPressed: () {}),
                        _buildIconButton(
                          Icons.check, 
                          onPressed: _saveTransaction,
                          backgroundColor: Color(_selectedCategory.colorValue),
                          iconColor: Colors.white,
                        ),
                      ]),
                    ],
                  ),
                ),
              ),
            ),
          ),

          // Date display at bottom
          Padding(
            padding: const EdgeInsets.all(16),
            child: Text(
              '${l10n.today}, ${DateFormatter.formatDate(context, _date)}',
              style: TextStyle(color: Colors.grey.shade600),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildButtonRow(List<Widget> buttons) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: buttons,
    );
  }

  Widget _buildCalculatorButton(String label, {required VoidCallback onPressed}) {
    return Expanded(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 4),
        child: AspectRatio(
          aspectRatio: 1,
          child: ElevatedButton(
            onPressed: onPressed,
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.grey.shade100,
              foregroundColor: Colors.black87,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
              elevation: 0,
              padding: EdgeInsets.zero,
            ),
            child: Text(
              label,
              style: const TextStyle(fontSize: 24),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildOperatorButton(String operator) {
    return Expanded(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 4),
        child: AspectRatio(
          aspectRatio: 1,
          child: ElevatedButton(
            onPressed: () {},
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.grey.shade200,
              foregroundColor: Colors.black87,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
              elevation: 0,
              padding: EdgeInsets.zero,
            ),
            child: Text(
              operator,
              style: const TextStyle(fontSize: 24),
            ),
          ),
        ),
      ),
    );  
  }

  Widget _buildIconButton(
    IconData icon, {
    required VoidCallback onPressed,
    Color? backgroundColor,
    Color? iconColor,
  }) {
    return Expanded(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 4),
        child: AspectRatio(
          aspectRatio: 1,
          child: ElevatedButton(
            onPressed: onPressed,
            style: ElevatedButton.styleFrom(
              backgroundColor: backgroundColor ?? Colors.grey.shade100,
              foregroundColor: iconColor ?? Colors.black87,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
              elevation: 0,
              padding: EdgeInsets.zero,
            ),
            child: Icon(icon, size: 24),
          ),
        ),
      ),
    );
  }
}