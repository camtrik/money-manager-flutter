// UI in this file is almost fully generated by Claude 3.7 Sonnet
import 'package:flutter/material.dart';
import 'package:money_manager/widgets/select_category_sheet.dart';
import 'package:money_manager/utils/category_utils.dart';
import 'package:money_manager/utils/date_formatter.dart';
import 'package:money_manager/utils/other_utils.dart';
import 'package:provider/provider.dart';
import 'package:money_manager/models/category.dart';
import 'package:money_manager/models/transaction.dart';
import 'package:money_manager/view_models/tx_list_model.dart';
import 'package:money_manager/view_models/date_range_model.dart';
import 'package:money_manager/l10n/gen/app_localizations.dart';

class EditTransactionSheet extends StatefulWidget {
  final Category category;
  final Transaction? tx; 

  const EditTransactionSheet({super.key, required this.category, this.tx});

  @override
  State<EditTransactionSheet> createState() => _EditTransactionSheetState();
}

class _EditTransactionSheetState extends State<EditTransactionSheet> {
  late String _amount;
  late DateTime _date;
  final TextEditingController _notesController = TextEditingController();
  late Category _selectedCategory;
  bool _isEditMode = false;
  String? _errorMessage;
  String _currency = 'CNY'; // TODO: implement other currencies 
  bool _dateInitialized = false; 
  
  @override
  void initState() {
    super.initState();
    _selectedCategory = widget.category;
    _isEditMode = widget.tx != null; 
    _amount = widget.tx != null ? OtherUtils.formatAmount(widget.tx!.amount) : "0";
    
    if (_isEditMode) {
      _date = widget.tx!.occurredAt;
      _dateInitialized = true;
    } else {
      _date = DateTime.now();
    }

    
    
    _notesController.text = widget.tx?.notes ?? '';
    _selectedCategory = widget.tx?.category ?? widget.category;
  }
  
  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    
    // set date to current date if not in edit mode and date is not initialized
    if (!_isEditMode && !_dateInitialized) {
      final dateRange = Provider.of<DateRangeModel>(context, listen: false);
      final now = DateTime.now();
      
      if (dateRange.isInRange(now)) {
        _date = now;
      } 
      else {
        _date = dateRange.endDate;
      }
      
      _dateInitialized = true;
    }
  }

  void _onNumberPressed(String value) {
    setState(() {
      if (_amount == '0') {
        _amount = value;
      } else {
        _amount += value;
      }
    });
  }

  void _onDecimalPressed() {
    setState(() {
      if (!_amount.contains('.')) {
        _amount += '.';
      }
    });
  }

  void _onClearPressed() {
    setState(() {
      _amount = '0';
    });
  }

  void _onDeletePressed() {
    setState(() {
      if (_amount.length > 1) {
        _amount = _amount.substring(0, _amount.length - 1);
      } else {
        _amount = '0';
      }
    });
  }

  void _saveTransaction() {
    final amount = double.tryParse(_amount) ?? 0.0;
    if (amount > 0) {
      if (_isEditMode) {
        final updatedTransaction = Transaction(
          id: widget.tx!.id,
          amount: amount,
          currency: _currency,
          category: _selectedCategory,
          notes: _notesController.text.trim(), 
          occurredAt: _date,
        );
        context.read<TxListModel>().update(updatedTransaction);
      } else {
        final transaction = Transaction(
          amount: amount,
          currency: _currency,
          category: _selectedCategory,
          notes: _notesController.text.trim(), 
          occurredAt: _date,
        );
        context.read<TxListModel>().add(transaction);
      }
      Navigator.pop(context);
    } else {
      setState(() {
        _errorMessage = AppLocalizations.of(context)!.amountRequired;
      });
    }
  }

  void _showDatePicker() async {
    final pickedDate = await showDatePicker(
      context: context,
      initialDate: _date,
      firstDate: DateTime(2010),
      lastDate: DateTime.now(),
    );
    if (pickedDate != null) {
      setState(() {
        _date = pickedDate;
      });
    }
  }

  void _showCategoryPicker() {
    showModalBottomSheet(
      context: context, 
      isScrollControlled: true, 
      useSafeArea: true,
      backgroundColor: Colors.transparent, 
      builder: (context) {
        return SelectCategorySheet(
          onCategorySelected: (selectedCategory) {
            setState(() {
              _selectedCategory = selectedCategory;
            });
          }
        );
      }
    );
  }

  @override
  void dispose() {
    _notesController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    final screenHeight = MediaQuery.of(context).size.height;
    final screenWidth = MediaQuery.of(context).size.width;
    final bottomPadding = MediaQuery.of(context).padding.bottom;
    
    final handleWidth = screenWidth * 0.1;
    final handleHeight = 4.0;
    final handleMargin = screenHeight * 0.015;
    
    // 固定表单高度
    final containerHeight = screenHeight * 0.7;
    
    return GestureDetector(
      onTap: () {
        // 点击表单的非交互区域时收起键盘
        FocusScope.of(context).unfocus();
      },
      child: Material(
        type: MaterialType.transparency,
        child: Container(
          height: containerHeight,
          decoration: const BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(16),
              topRight: Radius.circular(16),
            ),
          ),
          child: SafeArea(
            top: false,
            bottom: true,
            child: Column(
              children: [
                // Handle bar
                Container(
                  width: handleWidth,
                  height: handleHeight,
                  margin: EdgeInsets.symmetric(vertical: handleMargin),
                  decoration: BoxDecoration(
                    color: Colors.grey.shade300,
                    borderRadius: BorderRadius.circular(2),
                  ),
                ),

                // Content area
                Expanded(
                  child: SingleChildScrollView(
                    child: Column(
                      children: [
                        // Header with category type
                        Padding(
                          padding: EdgeInsets.symmetric(
                            horizontal: screenWidth * 0.04,
                          ), 
                          child: Center(
                            child: GestureDetector(
                              onTap: _showCategoryPicker,
                              child: Container(
                                padding: EdgeInsets.symmetric(
                                  horizontal: screenWidth * 0.05,
                                  vertical: screenHeight * 0.015,
                                ),
                                decoration: BoxDecoration(
                                  color: Color(_selectedCategory.colorValue).withValues(alpha: 0.1),
                                  borderRadius: BorderRadius.circular(screenWidth * 0.06),
                                  border: Border.all(
                                    color: Color(_selectedCategory.colorValue).withValues(alpha: 0.3),
                                    width: 1,
                                  ),
                                ),
                                child: Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    CircleAvatar(
                                      radius: screenWidth * 0.045,
                                      backgroundColor: Color(_selectedCategory.colorValue).withValues(alpha: 0.2),
                                      child: Icon(
                                        _selectedCategory.icon,
                                        size: screenWidth * 0.045,
                                      ),
                                    ),
                                    SizedBox(width: screenWidth * 0.03),
                                    Flexible(
                                      child: Text(
                                        CategoryUtils.getLocalizedName(context, _selectedCategory.id, _selectedCategory.name),
                                        style: TextStyle(
                                          fontWeight: FontWeight.bold,
                                          fontSize: screenWidth * 0.04,
                                        ),
                                        overflow: TextOverflow.ellipsis,
                                      ),
                                    ),
                                    SizedBox(width: screenWidth * 0.02),
                                    Icon(
                                      Icons.arrow_drop_down,
                                      color: Color(_selectedCategory.colorValue),
                                      size: screenWidth * 0.06,
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ),
                        ), 
                      
                        SizedBox(height: screenHeight * 0.02),

                        // Amount display
                        Text(
                          l10n.expense,
                          style: TextStyle(color: Colors.grey.shade600, fontSize: screenWidth * 0.04),
                        ),
                        SizedBox(height: screenHeight * 0.01),
                        FittedBox(
                          fit: BoxFit.scaleDown,
                          child: Text(
                            '¥ $_amount',
                            style: TextStyle(
                              fontSize: screenWidth * 0.06,
                              fontWeight: FontWeight.bold,
                              color: Colors.black87,
                            ),
                          ),
                        ),

                        SizedBox(height: screenHeight * 0.02),

                        // Note field
                        Padding(
                          padding: EdgeInsets.symmetric(
                            horizontal: screenWidth * 0.04,
                          ),
                          child: TextField(
                            controller: _notesController,
                            decoration: InputDecoration(
                              hintText: l10n.notes,
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(8),
                                borderSide: BorderSide(color: Colors.grey.shade300),
                              ),
                              contentPadding: EdgeInsets.symmetric(
                                horizontal: screenWidth * 0.04,
                                vertical: screenHeight * 0.015,
                              ),
                            ),
                          ),
                        ),

                        SizedBox(height: screenHeight * 0.02),

                        // Calculator buttons
                        Center(
                          child: ConstrainedBox(
                            constraints: const BoxConstraints(maxWidth: 400),
                            child: Padding(
                              padding: const EdgeInsets.symmetric(horizontal: 16),
                              child: Column(
                                children: [
                                  _buildButtonRow([
                                    _buildOperatorButton('÷'),
                                    _buildCalculatorButton('7', onPressed: () => _onNumberPressed('7')),
                                    _buildCalculatorButton('8', onPressed: () => _onNumberPressed('8')),
                                    _buildCalculatorButton('9', onPressed: () => _onNumberPressed('9')),
                                    _buildIconButton(Icons.backspace_outlined, onPressed: _onDeletePressed),
                                  ]),
                                  const SizedBox(height: 8),
                                  _buildButtonRow([
                                    _buildOperatorButton('×'),
                                    _buildCalculatorButton('4', onPressed: () => _onNumberPressed('4')),
                                    _buildCalculatorButton('5', onPressed: () => _onNumberPressed('5')),
                                    _buildCalculatorButton('6', onPressed: () => _onNumberPressed('6')),
                                    _buildCalculatorButton('AC', onPressed: _onClearPressed),
                                  ]),
                                  const SizedBox(height: 8),
                                  _buildButtonRow([
                                    _buildOperatorButton('-'),
                                    _buildCalculatorButton('1', onPressed: () => _onNumberPressed('1')),
                                    _buildCalculatorButton('2', onPressed: () => _onNumberPressed('2')),
                                    _buildCalculatorButton('3', onPressed: () => _onNumberPressed('3')),
                                    _buildIconButton(Icons.calendar_today, onPressed: _showDatePicker),
                                  ]),
                                  const SizedBox(height: 8),
                                  _buildButtonRow([
                                    _buildOperatorButton('+'),
                                    _buildCalculatorButton('0', onPressed: () => _onNumberPressed('0')),
                                    _buildCalculatorButton('.', onPressed: _onDecimalPressed),
                                    _buildCalculatorButton('¥', onPressed: () {}),
                                    _buildIconButton(
                                      Icons.check, 
                                      onPressed: _saveTransaction,
                                      backgroundColor: Color(_selectedCategory.colorValue),
                                      iconColor: Colors.white,
                                    ),
                                  ]),
                                ],
                              ),
                            ),
                          ),
                        ),

                        if (_errorMessage != null) ...[
                          Text(
                            _errorMessage!,
                            style: TextStyle(
                              color: Colors.red,
                              fontSize: screenWidth * 0.035,
                            ),
                          ),
                        ],

                        // Date display
                        Padding(
                          padding: EdgeInsets.only(
                            left: screenWidth * 0.04,
                            right: screenWidth * 0.04,
                            top: screenHeight * 0.01,
                            bottom: (bottomPadding > 0 ? bottomPadding : screenHeight * 0.02) + 16,
                          ),
                          child: Text(
                            '${l10n.today}, ${DateFormatter.formatDate(context, _date)}',
                            style: TextStyle(
                              color: Colors.grey.shade600,
                              fontSize: screenWidth * 0.035,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  // Keeping the original methods as requested
  Widget _buildButtonRow(List<Widget> buttons) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: buttons,
    );
  }

  Widget _buildCalculatorButton(String label, {required VoidCallback onPressed}) {
    return Expanded(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 4),
        child: AspectRatio(
          aspectRatio: 1,
          child: ElevatedButton(
            onPressed: onPressed,
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.grey.shade100,
              foregroundColor: Colors.black87,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
              elevation: 0,
              padding: EdgeInsets.zero,
            ),
            child: Text(
              label,
              style: const TextStyle(fontSize: 24),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildOperatorButton(String operator) {
    return Expanded(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 4),
        child: AspectRatio(
          aspectRatio: 1,
          child: ElevatedButton(
            onPressed: () {},
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.grey.shade200,
              foregroundColor: Colors.black87,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
              elevation: 0,
              padding: EdgeInsets.zero,
            ),
            child: Text(
              operator,
              style: const TextStyle(fontSize: 24),
            ),
          ),
        ),
      ),
    );  
  }

  Widget _buildIconButton(
    IconData icon, {
    required VoidCallback onPressed,
    Color? backgroundColor,
    Color? iconColor,
  }) {
    return Expanded(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 4),
        child: AspectRatio(
          aspectRatio: 1,
          child: ElevatedButton(
            onPressed: onPressed,
            style: ElevatedButton.styleFrom(
              backgroundColor: backgroundColor ?? Colors.grey.shade100,
              foregroundColor: iconColor ?? Colors.black87,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
              elevation: 0,
              padding: EdgeInsets.zero,
            ),
            child: Icon(icon, size: 24),
          ),
        ),
      ),
    );
  }
}